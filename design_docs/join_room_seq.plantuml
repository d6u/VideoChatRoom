@startuml Gameroom

autoactivate on

participant Client1
participant APIGateway1
participant Lambda1
participant DynamoDb
participant Lambda2
participant APIGateway2
participant Client2

== one client ==

' WebSocket connect
Client1 ->(10) APIGateway1 : $connect
  APIGateway1 -> Lambda1 : handler
  return 200
return
' On connect
Client1 -> APIGateway1 : JoinRoom
  APIGateway1 -> Lambda1 : {action: "JoinRoom", roomId}
    par
      Lambda1 -> DynamoDb : UpdateItem Room by roomId "ADD clients [connectionId]"
      return {roomId, clients: Set<connectionId>}
      Lambda1 -> APIGateway1 : postToConnection() {type: "ClientList", clients: Array<ConnectionId>}
      APIGateway1 -> Client1 : {type: "ClientList", clients: Array<ConnectionId>}
      return
      return
    else
      Lambda1 -> DynamoDb : UpdateItem Client by connectionId "SET roomId = roomId"
      return
    end

    loop for each connection, except the current connection
      alt #lightblue
        Lambda1 -> APIGateway2 : postToConnection() {type: "ClientJoin", clientId: connectionId}
        return
      else #pink 410 stale connection
        Lambda1 -> DynamoDb : UpdateItem Room by roomId "DELETE clients [connectionId]"
        return
      end
    end
  return 200
return

== race condition ==

' WebSocket connect
Client1 -> APIGateway1 : $connect
  APIGateway1 -> Lambda1 : handler
  return 200
return
Client2 -> APIGateway2 : $connect
  APIGateway2 -> Lambda2 : handler
  return 200
return
' On connect
Client1 -> APIGateway1 : JoinRoom
Client2 -> APIGateway2 : JoinRoom
  APIGateway1 -> Lambda1 : {action: "JoinRoom", roomId}
  APIGateway2 -> Lambda2 : {action: "JoinRoom", roomId}
    par
      Lambda1 -> DynamoDb : UpdateItem Room by roomId "ADD clients [connectionId]"
      return {roomId, clients: Set[clientId1]}
      Lambda1 -> APIGateway1 : postToConnection() {type: "ClientList", clients: Set[]}
      APIGateway1 -> Client1 : {type: "ClientList", clients: Set[]}
      return
      return
    else
      Lambda1 -> DynamoDb : UpdateItem Client by connectionId "SET roomId = roomId"
      return
    end

    par
      Lambda2 -> DynamoDb : UpdateItem Room by roomId "ADD clients [connectionId]"
      return {roomId, clients: Set[clientId1, clientId2]}
      Lambda2 -> APIGateway2 : postToConnection() {type: "ClientList", clients: Array[clientId2]}
      APIGateway2 -> Client2 : {type: "ClientList", clients: Array[clientId2]}
      return
      return
    else
      Lambda2 -> DynamoDb : UpdateItem Client by connectionId "SET roomId = roomId"
      return
    end

    loop for each connection, except the current connection
      alt #lightblue
        Lambda2 -> APIGateway1 : postToConnection() {type: "ClientJoin", clientId: connectionId}
          APIGateway1 -> Client1
          return
        return
      else #pink 410 stale connection
        Lambda2 -> DynamoDb : UpdateItem Room by roomId "DELETE clients [connectionId]"
        return
      end
    end

Client1 -> APIGateway1 : {action: "ConnectClient"}
  APIGateway1 -> Lambda1
    Lambda1 -> APIGateway2
      APIGateway2 -> Client2
      return
    return
  return
return

    loop for each connection, except the current connection
      alt #lightblue
        Lambda1 -> APIGateway2 : postToConnection() {type: "ClientJoin", clientId: connectionId}
        return
      else #pink 410 stale connection
        Lambda1 -> DynamoDb : UpdateItem Room by roomId "DELETE clients [connectionId]"
        return
      end
    end
  return 200
  return 200
return
return

@enduml
