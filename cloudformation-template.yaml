AWSTemplateFormatVersion: 2010-09-09
Description: >
  Multiline string placeholder.
Parameters:
  LambdaSourceS3KeyCreateRoom:
    Type: String
  LambdaSourceS3KeyGetRoomDeltas:
    Type: String
  LambdaSourceS3KeyGetRoomSnapshot:
    Type: String
  LambdaSourceS3KeyConnect:
    Type: String
  LambdaSourceS3KeyDisconnect:
    Type: String
  LambdaSourceS3KeyDefault:
    Type: String
  LambdaSourceS3KeyJoinRoom:
    Type: String
  LambdaSourceS3KeyConnectClient:
    Type: String
  LambdaSourceS3KeyRoomAction:
    Type: String
Resources:
  # --- Lambda IAM ---
  IamRoleLambdaShared:
    Type: AWS::IAM::Role
    Properties:
      Policies:
        - PolicyName: !Sub ${AWS::StackName}LambdaReadWriteDynamoDb
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:Query
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                Resource:
                  - !GetAtt DynamoDbTableRoomSnapshots.Arn
                  - !GetAtt DynamoDbTableRoomDeltas.Arn
                  - !GetAtt DynamoDbTableRoomToClients.Arn
                  - !GetAtt DynamoDbTableClientToRoom.Arn
                  - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/*/index/*
        - PolicyName: !Sub ${AWS::StackName}LambdaPostToWebSocketConnection
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - execute-api:ManageConnections
                Resource:
                  - !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayApiWebSocket.ApiId}/*/*/*
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
  IamPolicyLambdaLogging:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub ${AWS::StackName}LambdaLogging
      Roles:
        - !Ref IamRoleLambdaShared
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
            Resource:
              - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*
          - Effect: Allow
            Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource:
              - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${LambdaFunctionCreateRoom}:*
              - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${LambdaFunctionGetRoomDeltas}:*
              - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${LambdaFunctionGetRoomSnapshot}:*
              - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${LambdaFunctionConnect}:*
              - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${LambdaFunctionDefault}:*
              - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${LambdaFunctionDisconnect}:*
              - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${LambdaFunctionJoinRoom}:*
              - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${LambdaFunctionConnectClient}:*
              - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${LambdaFunctionRoomAction}:*
  IamPolicyLambdaInteractSqs:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub ${AWS::StackName}LambdaInteractSqs
      Roles:
        - !Ref IamRoleLambdaShared
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - sqs:SendMessage
              - sqs:ReceiveMessage
              - sqs:DeleteMessage
              - sqs:GetQueueAttributes
            Resource:
              - !Sub arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:${SqsQueueRoomActions.QueueName}

  # --- DynamoDB ---
  DynamoDbTableRoomSnapshots:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${AWS::StackName}RoomSnapshots
      TableClass: STANDARD
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: RoomId
          AttributeType: S
      KeySchema:
        - AttributeName: RoomId
          KeyType: HASH
  DynamoDbTableRoomDeltas:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${AWS::StackName}RoomDeltas
      TableClass: STANDARD
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: RoomId
          AttributeType: S
        - AttributeName: Seq
          AttributeType: N
      KeySchema:
        - AttributeName: RoomId
          KeyType: HASH
        - AttributeName: Seq
          KeyType: RANGE
  DynamoDbTableRoomToClients:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${AWS::StackName}RoomToClients
      TableClass: STANDARD
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: RoomId
          AttributeType: S
      KeySchema:
        - AttributeName: RoomId
          KeyType: HASH
  DynamoDbTableClientToRoom:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${AWS::StackName}ClientToRoom
      TableClass: STANDARD
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: ClientId
          AttributeType: S
      KeySchema:
        - AttributeName: ClientId
          KeyType: HASH

  # --- CloudWatch ---
  LogsLogGroupHttpApiAccessLog:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub ${AWS::StackName}HttpApiAccessLog
      RetentionInDays: 30
  LogsLogGroupWebSocketApiAccessLog:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub ${AWS::StackName}WebSocketApiAccessLog
      RetentionInDays: 30

  # --- HTTP APIs ---
  ApiGatewayApiHttp:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: !Sub ${AWS::StackName}ApiGatewayApiHttp
      ProtocolType: HTTP
      CorsConfiguration:
        AllowMethods:
          - "*"
        AllowOrigins:
          - "*"

  # --- HTTP APIs stage ---
  ApiGatewayStageHttpDefault:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref ApiGatewayApiHttp
      StageName: $default
      AutoDeploy: true
      AccessLogSettings:
        DestinationArn: !GetAtt LogsLogGroupHttpApiAccessLog.Arn
        Format: >
          {"requestId": "$context.requestId", "ip": "$context.identity.sourceIp", "caller": "$context.identity.caller", "user": "$context.identity.user", "requestTime": "$context.requestTime", "routeKey": "$context.routeKey", "status": "$context.status"}

  # --- HTTP APIs route: POST /rooms ---
  ApiGatewayRouteCreateRoom:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ApiGatewayApiHttp
      RouteKey: "POST /rooms"
      Target: !Join
        - /
        - - integrations
          - !Ref ApiGatewayIntegrationCreateRoom
  ApiGatewayIntegrationCreateRoom:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref ApiGatewayApiHttp
      IntegrationMethod: GET
      IntegrationType: AWS_PROXY
      IntegrationUri: !GetAtt LambdaFunctionCreateRoom.Arn
      PayloadFormatVersion: 2.0
  LambdaFunctionCreateRoom:
    Type: AWS::Lambda::Function
    Properties:
      Architectures:
        - arm64
      Runtime: nodejs18.x
      Handler: index.handler
      Role: !GetAtt IamRoleLambdaShared.Arn
      Code:
        S3Bucket: gameroom-deployment
        S3Key: !Ref LambdaSourceS3KeyCreateRoom
      Environment:
        Variables:
          TABLE_NAME_ROOM_SNAPSHOTS: !Ref DynamoDbTableRoomSnapshots
          TABLE_NAME_ROOM_DELTAS: !Ref DynamoDbTableRoomDeltas
          TABLE_NAME_ROOM_TO_CLIENTS: !Ref DynamoDbTableRoomToClients
          TABLE_NAME_CLIENT_TO_ROOM: !Ref DynamoDbTableClientToRoom
      TracingConfig:
        Mode: Active
  LambdaPermissionCreateRoom:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref LambdaFunctionCreateRoom
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayApiHttp.ApiId}/*/*/rooms

  # --- HTTP APIs route: GET /rooms/{roomId}/deltas ---
  ApiGatewayRouteGetRoomDeltas:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ApiGatewayApiHttp
      RouteKey: "GET /rooms/{roomId}/deltas"
      Target: !Join
        - /
        - - integrations
          - !Ref ApiGatewayIntegrationGetRoomDeltas
  ApiGatewayIntegrationGetRoomDeltas:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref ApiGatewayApiHttp
      IntegrationMethod: GET
      IntegrationType: AWS_PROXY
      IntegrationUri: !GetAtt LambdaFunctionGetRoomDeltas.Arn
      PayloadFormatVersion: 2.0
  LambdaFunctionGetRoomDeltas:
    Type: AWS::Lambda::Function
    Properties:
      Architectures:
        - arm64
      Runtime: nodejs18.x
      Handler: index.handler
      Role: !GetAtt IamRoleLambdaShared.Arn
      Code:
        S3Bucket: gameroom-deployment
        S3Key: !Ref LambdaSourceS3KeyGetRoomDeltas
      Environment:
        Variables:
          TABLE_NAME_ROOM_SNAPSHOTS: !Ref DynamoDbTableRoomSnapshots
          TABLE_NAME_ROOM_DELTAS: !Ref DynamoDbTableRoomDeltas
          TABLE_NAME_ROOM_TO_CLIENTS: !Ref DynamoDbTableRoomToClients
          TABLE_NAME_CLIENT_TO_ROOM: !Ref DynamoDbTableClientToRoom
      TracingConfig:
        Mode: Active
  LambdaPermissionGetRoomDeltas:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref LambdaFunctionGetRoomDeltas
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayApiHttp.ApiId}/*/*/*

  # --- HTTP APIs route: GET /rooms/{roomId}/snapshot ---
  ApiGatewayRouteGetRoomSnapshot:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ApiGatewayApiHttp
      RouteKey: "GET /rooms/{roomId}/snapshot"
      Target: !Join
        - /
        - - integrations
          - !Ref ApiGatewayIntegrationGetRoomSnapshot
  ApiGatewayIntegrationGetRoomSnapshot:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref ApiGatewayApiHttp
      IntegrationMethod: GET
      IntegrationType: AWS_PROXY
      IntegrationUri: !GetAtt LambdaFunctionGetRoomSnapshot.Arn
      PayloadFormatVersion: 2.0
  LambdaFunctionGetRoomSnapshot:
    Type: AWS::Lambda::Function
    Properties:
      Architectures:
        - arm64
      Runtime: nodejs18.x
      Handler: index.handler
      Role: !GetAtt IamRoleLambdaShared.Arn
      Code:
        S3Bucket: gameroom-deployment
        S3Key: !Ref LambdaSourceS3KeyGetRoomSnapshot
      Environment:
        Variables:
          TABLE_NAME_ROOM_SNAPSHOTS: !Ref DynamoDbTableRoomSnapshots
          TABLE_NAME_ROOM_DELTAS: !Ref DynamoDbTableRoomDeltas
          TABLE_NAME_ROOM_TO_CLIENTS: !Ref DynamoDbTableRoomToClients
          TABLE_NAME_CLIENT_TO_ROOM: !Ref DynamoDbTableClientToRoom
      TracingConfig:
        Mode: Active
  LambdaPermissionGetRoomSnapshot:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref LambdaFunctionGetRoomSnapshot
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayApiHttp.ApiId}/*/*/*

  # --- WebSocket APIs ---
  ApiGatewayApiWebSocket:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: !Sub ${AWS::StackName}ApiGatewayApiWebSocket
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: $request.body.action

  # --- WebSocket APIs stage ---
  ApiGatewayStageWebSocketStaging:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref ApiGatewayApiWebSocket
      StageName: staging
      AutoDeploy: true
      DefaultRouteSettings:
        DataTraceEnabled: true
        DetailedMetricsEnabled: true
        LoggingLevel: INFO
      AccessLogSettings:
        DestinationArn: !GetAtt LogsLogGroupWebSocketApiAccessLog.Arn
        Format: >
          {"stage": "$context.stage", "request_id": "$context.requestId", "api_id": "$context.apiId", "resource_path": "$context.resourcePath", "resource_id": "$context.resourceId", "http_method": "$context.httpMethod", "source_ip": "$context.identity.sourceIp", "user-agent": "$context.identity.userAgent", "account_id": "$context.identity.accountId", "api_key": "$context.identity.apiKey", "caller": "$context.identity.caller", "user": "$context.identity.user", "user_arn": "$context.identity.userArn"}

  # --- WebSocket APIs route: $connect ---
  ApiGatewayRouteConnect:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ApiGatewayApiWebSocket
      RouteKey: $connect
      Target: !Join
        - /
        - - integrations
          - !Ref ApiGatewayIntegrationConnect
  ApiGatewayIntegrationConnect:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref ApiGatewayApiWebSocket
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunctionConnect.Arn}/invocations
  LambdaFunctionConnect:
    Type: AWS::Lambda::Function
    Properties:
      Architectures:
        - arm64
      Runtime: nodejs18.x
      Handler: index.handler
      Role: !GetAtt IamRoleLambdaShared.Arn
      Code:
        S3Bucket: gameroom-deployment
        S3Key: !Ref LambdaSourceS3KeyConnect
      TracingConfig:
        Mode: Active
  LambdaPermissionConnect:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref LambdaFunctionConnect
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayApiWebSocket.ApiId}/*/$connect

  # --- WebSocket APIs route: $default ---
  ApiGatewayRouteDefault:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ApiGatewayApiWebSocket
      RouteKey: $default
      Target: !Join
        - /
        - - integrations
          - !Ref ApiGatewayIntegrationDefault
  ApiGatewayIntegrationDefault:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref ApiGatewayApiWebSocket
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunctionDefault.Arn}/invocations
  ApiGatewayIntegrationResponseDefault:
    Type: AWS::ApiGatewayV2::IntegrationResponse
    Properties:
      ApiId: !Ref ApiGatewayApiWebSocket
      IntegrationId: !Ref ApiGatewayIntegrationDefault
      IntegrationResponseKey: $default
  ApiGatewayRouteResponseDefault:
    Type: AWS::ApiGatewayV2::RouteResponse
    Properties:
      ApiId: !Ref ApiGatewayApiWebSocket
      RouteId: !Ref ApiGatewayRouteDefault
      RouteResponseKey: $default
  LambdaFunctionDefault:
    Type: AWS::Lambda::Function
    Properties:
      Architectures:
        - arm64
      Runtime: nodejs18.x
      Handler: index.handler
      Role: !GetAtt IamRoleLambdaShared.Arn
      Code:
        S3Bucket: gameroom-deployment
        S3Key: !Ref LambdaSourceS3KeyDefault
      TracingConfig:
        Mode: Active
  LambdaPermissionDefault:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref LambdaFunctionDefault
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayApiWebSocket.ApiId}/*/$default

  # --- WebSocket APIs route: $disconnect ---
  ApiGatewayRouteDisconnect:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ApiGatewayApiWebSocket
      RouteKey: $disconnect
      Target: !Join
        - /
        - - integrations
          - !Ref ApiGatewayIntegrationDisconnect
  ApiGatewayIntegrationDisconnect:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref ApiGatewayApiWebSocket
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunctionDisconnect.Arn}/invocations
  LambdaFunctionDisconnect:
    Type: AWS::Lambda::Function
    Properties:
      Architectures:
        - arm64
      Runtime: nodejs18.x
      Handler: index.handler
      Role: !GetAtt IamRoleLambdaShared.Arn
      Code:
        S3Bucket: gameroom-deployment
        S3Key: !Ref LambdaSourceS3KeyDisconnect
      Environment:
        Variables:
          TABLE_NAME_ROOM_SNAPSHOTS: !Ref DynamoDbTableRoomSnapshots
          TABLE_NAME_ROOM_DELTAS: !Ref DynamoDbTableRoomDeltas
          TABLE_NAME_ROOM_TO_CLIENTS: !Ref DynamoDbTableRoomToClients
          TABLE_NAME_CLIENT_TO_ROOM: !Ref DynamoDbTableClientToRoom
          ROOM_ACTIONS_QUEUE_URL: !GetAtt SqsQueueRoomActions.QueueUrl
      TracingConfig:
        Mode: Active
  LambdaPermissionDisconnect:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref LambdaFunctionDisconnect
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayApiWebSocket.ApiId}/*/$disconnect

  # --- WebSocket APIs route: JoinRoom ---
  ApiGatewayRouteJoinRoom:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ApiGatewayApiWebSocket
      RouteKey: JoinRoom
      Target: !Join
        - /
        - - integrations
          - !Ref ApiGatewayIntegrationJoinRoom
  ApiGatewayIntegrationJoinRoom:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref ApiGatewayApiWebSocket
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunctionJoinRoom.Arn}/invocations
  LambdaFunctionJoinRoom:
    Type: AWS::Lambda::Function
    Properties:
      Architectures:
        - arm64
      Runtime: nodejs18.x
      Handler: index.handler
      Role: !GetAtt IamRoleLambdaShared.Arn
      Code:
        S3Bucket: gameroom-deployment
        S3Key: !Ref LambdaSourceS3KeyJoinRoom
      Environment:
        Variables:
          TABLE_NAME_ROOM_SNAPSHOTS: !Ref DynamoDbTableRoomSnapshots
          TABLE_NAME_ROOM_DELTAS: !Ref DynamoDbTableRoomDeltas
          TABLE_NAME_ROOM_TO_CLIENTS: !Ref DynamoDbTableRoomToClients
          TABLE_NAME_CLIENT_TO_ROOM: !Ref DynamoDbTableClientToRoom
          ROOM_ACTIONS_QUEUE_URL: !GetAtt SqsQueueRoomActions.QueueUrl
          WEBSOCKET_API_ENDPOINT: !Sub ${ApiGatewayApiWebSocket.ApiEndpoint}/${ApiGatewayStageWebSocketStaging}
      TracingConfig:
        Mode: Active
  LambdaPermissionJoinRoom:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref LambdaFunctionJoinRoom
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayApiWebSocket.ApiId}/*/JoinRoom

  # --- WebSocket APIs route: ConnectClient ---
  ApiGatewayRouteConnectClient:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ApiGatewayApiWebSocket
      RouteKey: ConnectClient
      Target: !Join
        - /
        - - integrations
          - !Ref ApiGatewayIntegrationConnectClient
  ApiGatewayIntegrationConnectClient:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref ApiGatewayApiWebSocket
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunctionConnectClient.Arn}/invocations
  LambdaFunctionConnectClient:
    Type: AWS::Lambda::Function
    Properties:
      Architectures:
        - arm64
      Runtime: nodejs18.x
      Handler: index.handler
      Role: !GetAtt IamRoleLambdaShared.Arn
      Code:
        S3Bucket: gameroom-deployment
        S3Key: !Ref LambdaSourceS3KeyConnectClient
      Environment:
        Variables:
          TABLE_NAME_ROOM_SNAPSHOTS: !Ref DynamoDbTableRoomSnapshots
          TABLE_NAME_ROOM_DELTAS: !Ref DynamoDbTableRoomDeltas
          TABLE_NAME_ROOM_TO_CLIENTS: !Ref DynamoDbTableRoomToClients
          TABLE_NAME_CLIENT_TO_ROOM: !Ref DynamoDbTableClientToRoom
          WEBSOCKET_API_ENDPOINT: !Sub ${ApiGatewayApiWebSocket.ApiEndpoint}/${ApiGatewayStageWebSocketStaging}
      TracingConfig:
        Mode: Active
  LambdaPermissionConnectClient:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref LambdaFunctionConnectClient
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayApiWebSocket.ApiId}/*/ConnectClient

  # --- SQS ---
  SqsQueueRoomActions:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub ${AWS::StackName}RoomActions.fifo
      DeduplicationScope: messageGroup
      FifoQueue: true
  LambdaEventSourceMappingRoomAction:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      FunctionName: !Ref LambdaFunctionRoomAction
      EventSourceArn: !GetAtt SqsQueueRoomActions.Arn
  LambdaFunctionRoomAction:
    Type: AWS::Lambda::Function
    Properties:
      Architectures:
        - arm64
      Runtime: nodejs18.x
      Handler: index.handler
      Role: !GetAtt IamRoleLambdaShared.Arn
      Code:
        S3Bucket: gameroom-deployment
        S3Key: !Ref LambdaSourceS3KeyRoomAction
      Environment:
        Variables:
          TABLE_NAME_ROOM_SNAPSHOTS: !Ref DynamoDbTableRoomSnapshots
          TABLE_NAME_ROOM_DELTAS: !Ref DynamoDbTableRoomDeltas
          TABLE_NAME_ROOM_TO_CLIENTS: !Ref DynamoDbTableRoomToClients
          TABLE_NAME_CLIENT_TO_ROOM: !Ref DynamoDbTableClientToRoom
          WEBSOCKET_API_ENDPOINT: !Sub ${ApiGatewayApiWebSocket.ApiEndpoint}/${ApiGatewayStageWebSocketStaging}
      TracingConfig:
        Mode: Active

# --- Outputs ---
Outputs:
  HttpEndpointUrl:
    Value: !GetAtt ApiGatewayApiHttp.ApiEndpoint
  WebSocketEndpointUrl:
    Value: !Join
      - /
      - - !GetAtt ApiGatewayApiWebSocket.ApiEndpoint
        - staging
